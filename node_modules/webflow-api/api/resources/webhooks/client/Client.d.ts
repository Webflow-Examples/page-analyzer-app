/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Webflow from "../../..";
export declare namespace Webhooks {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | string>;
        accessToken: core.Supplier<core.BearerToken>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Webhooks {
    protected readonly _options: Webhooks.Options;
    constructor(_options: Webhooks.Options);
    /**
     * List all App-created Webhooks registered for a given site </br></br> Required scope | `sites:read`
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await webflow.webhooks.list("site_id")
     */
    list(siteId: string, requestOptions?: Webhooks.RequestOptions): Promise<Webflow.WebhookList>;
    /**
     * Create a new Webhook, to be notified when Webflow resources change. Limit of 75 registrations per `triggerType`, per site. </br></br> Access to this endpoint requires a bearer token from a Data Client App. The only exceptions are for creating webhooks with `site_publish` or `form_submission` triggers, which can be done with Site Tokens </br> Required scope | `sites:write`
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await webflow.webhooks.create("site_id", {
     *         triggerType: Webflow.TriggerType.FormSubmission,
     *         url: "https://api.mydomain.com/webhook"
     *     })
     */
    create(siteId: string, request: Webflow.WebhooksCreateRequest, requestOptions?: Webhooks.RequestOptions): Promise<Webflow.Webhook>;
    /**
     * Get a specific Webhook instance
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await webflow.webhooks.get("webhook_id")
     */
    get(webhookId: string, requestOptions?: Webhooks.RequestOptions): Promise<Webflow.Webhook>;
    /**
     * Remove a Webhook
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await webflow.webhooks.delete("webhook_id")
     */
    delete(webhookId: string, requestOptions?: Webhooks.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}
