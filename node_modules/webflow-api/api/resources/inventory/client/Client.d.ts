/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Webflow from "../../..";
export declare namespace Inventory {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | string>;
        accessToken: core.Supplier<core.BearerToken>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Inventory {
    protected readonly _options: Inventory.Options;
    constructor(_options: Inventory.Options);
    /**
     * List the current inventory levels for a particular SKU item.
     *
     * Required scope | `ecommerce:read`
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await webflow.inventory.list("collection_id", "item_id")
     */
    list(collectionId: string, itemId: string, requestOptions?: Inventory.RequestOptions): Promise<Webflow.InventoryItem>;
    /**
     * Updates the current inventory levels for a particular SKU item. Updates may be given in one or two methods, absolutely or incrementally. Absolute updates are done by setting `quantity` directly. Incremental updates are by specifying the inventory delta in `updateQuantity` which is then added to the `quantity` stored on the server.
     *
     * Required scope | `ecommerce:write`
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await webflow.inventory.update("collection_id", "item_id", {
     *         inventoryType: Webflow.InventoryUpdateRequestInventoryType.Infinite,
     *         updateQuantity: 1,
     *         quantity: 100
     *     })
     */
    update(collectionId: string, itemId: string, request: Webflow.InventoryUpdateRequest, requestOptions?: Inventory.RequestOptions): Promise<Webflow.InventoryItem>;
    protected _getAuthorizationHeader(): Promise<string>;
}
